#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.2.4'
__CHEETAH_versionTuple__ = (3, 2, 4, 'final', 0)
__CHEETAH_genTime__ = 1587502061.0327067
__CHEETAH_genTimestamp__ = 'Tue Apr 21 13:47:41 2020'
__CHEETAH_src__ = 'spec_template_lv6.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Apr 21 13:47:12 2020'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class spec_template_lv6(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(spec_template_lv6, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''const TRUE_r  :real = 9999.0;
const FALSE_r :real = -9999.0;

''')
        for state in VFFSL(SL,"state_list",True) : # generated from line 4, col 1
            write('''const ''')
            _v = VFFSL(SL,"state.name",True) # '$state.name' on line 5, col 7
            if _v is not None: write(_filter(_v, rawExpr='$state.name')) # from line 5, col 7.
            write(''':''')
            _v = VFFSL(SL,"state.datatype",True) # '$state.datatype' on line 5, col 19
            if _v is not None: write(_filter(_v, rawExpr='$state.datatype')) # from line 5, col 19.
            write(''' = ''')
            _v = VFFSL(SL,"state.idx",True) # '$state.idx' on line 5, col 37
            if _v is not None: write(_filter(_v, rawExpr='$state.idx')) # from line 5, col 37.
            write(''';
''')
        write('''
const n: int = ''')
        _v = VFFSL(SL,"len",False)(VFFSL(SL,"state_list",True)) # '$len($state_list)' on line 8, col 16
        if _v is not None: write(_filter(_v, rawExpr='$len($state_list)')) # from line 8, col 16.
        write('''; -- State Size
const AP_size: int = 2; 
const Phi_size: int = 3;

type SamplePoint         = {t : real; s : real^n};
type PerformancePoint    = real^Phi_size;
type PerformancePoint_AP = real^AP_size;


node Main(SP: SamplePoint) returns(Rho: PerformancePoint); 
var Rho_AP: PerformancePoint_AP;
let 
    Rho_AP = ComputeRho_AP(SP); 
    Rho    = ComputeRho_Phi(Rho_AP); 
tel


node ComputeRho_Phi(Rho_AP : PerformancePoint_AP) returns(Rho:PerformancePoint);
let

''')
        for i, proposition in VFFSL(SL,"enumerate",False)(VFN(VFFSL(SL,"AP",True),"values",False)()): # generated from line 28, col 5
            write('''    Rho[''')
            _v = VFFSL(SL,"i",True) # '$i' on line 29, col 9
            if _v is not None: write(_filter(_v, rawExpr='$i')) # from line 29, col 9.
            write('''] = Rho_AP[''')
            _v = VFFSL(SL,"i",True) # '$i' on line 29, col 22
            if _v is not None: write(_filter(_v, rawExpr='$i')) # from line 29, col 22.
            write(''']; 
''')
        write('''    
''')
        for i, formula in VFFSL(SL,"enumerate",False)(VFN(VFFSL(SL,"formulas",True),"values",False)()) : # generated from line 32, col 5
            k = VFFSL(SL,"i",True) + VFFSL(SL,"len",False)(VFN(VFFSL(SL,"AP",True),"values",False)())
            write('''    -- ''')
            _v = VFFSL(SL,"formula.text",True) # '$formula.text' on line 34, col 8
            if _v is not None: write(_filter(_v, rawExpr='$formula.text')) # from line 34, col 8.
            write(''' 
''')
            mod_form = VFN(VFFSL(SL,"formula.formula",True),"replace",False)()
            write('''    Rho[''')
            _v = VFFSL(SL,"k",True) # '$k' on line 36, col 9
            if _v is not None: write(_filter(_v, rawExpr='$k')) # from line 36, col 9.
            write(''']  = ''')
            _v = VFFSL(SL,"formula.formula",True) # '$formula.formula' on line 36, col 16
            if _v is not None: write(_filter(_v, rawExpr='$formula.formula')) # from line 36, col 16.
            write(''';
''')
        write('''
tel


node ComputeRho_AP(SP : SamplePoint) returns(Rho_AP:PerformancePoint_AP); 
let
''')
        for i, proposition in VFFSL(SL,"enumerate",False)(VFN(VFFSL(SL,"AP",True),"values",False)()): # generated from line 44, col 5
            write('''    Rho_AP[''')
            _v = VFFSL(SL,"i",True) # '$i' on line 45, col 12
            if _v is not None: write(_filter(_v, rawExpr='$i')) # from line 45, col 12.
            write('''] = f_''')
            _v = VFFSL(SL,"i",True) # '${i}' on line 45, col 20
            if _v is not None: write(_filter(_v, rawExpr='${i}')) # from line 45, col 20.
            write('''(SP); 
''')
        write('''tel


-----------------------------
-- Quantifiers for the APs --
-----------------------------

''')
        for i, proposition in VFFSL(SL,"enumerate",False)(VFN(VFFSL(SL,"AP",True),"values",False)()): # generated from line 54, col 1
            write('''-- ''')
            _v = VFFSL(SL,"proposition.text",True) # '$proposition.text' on line 55, col 4
            if _v is not None: write(_filter(_v, rawExpr='$proposition.text')) # from line 55, col 4.
            write('''
node f_''')
            _v = VFFSL(SL,"i",True) # '${i}' on line 56, col 8
            if _v is not None: write(_filter(_v, rawExpr='${i}')) # from line 56, col 8.
            write('''(SP: SamplePoint) returns(mu: real);
let
    mu = ''')
            _v = VFFSL(SL,"proposition.f",True) # '${proposition.f}' on line 58, col 10
            if _v is not None: write(_filter(_v, rawExpr='${proposition.f}')) # from line 58, col 10.
            write(''';    
tel
''')
        write('''


''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_spec_template_lv6 = 'respond'

## END CLASS DEFINITION

if not hasattr(spec_template_lv6, '_initCheetahAttributes'):
    templateAPIClass = getattr(spec_template_lv6,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(spec_template_lv6)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=spec_template_lv6()).run()


