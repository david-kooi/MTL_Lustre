-- Since with past interval
node Since_Interval<<const l:int; const u:int>>(x,y:real) returns (z:real);
let
    assert(l>=0);
    assert(u>0);

   z = Since_Recurse<<l,u,0>>(x, y);

tel

node Since_Recurse<<const l:int; const u:int; const n:int>>(x,y:real) returns(z:real);
var x_delay, x_n, min_m, min_n:real;
let 
    assert(u-l>=0); 

    x_delay = Delay<<l>>(x); 
    x_n = Delay<<n>>(x_delay);
    min_m = Sliding_Min<<l-1+n>>(y); 
    min_n = Min_2(x_n, min_m);
    z = with (n=u-l) then min_n
                     else Max_2(min_n, Since_Recurse<<l,u,n+1>>(x,y));
            
tel

-- Get the minimum between the present to n steps back
node Sliding_Min<<const n:int>>(x:real) returns (z:real);
var x_n:real;
let   
    x_n = Delay<<n>>(x);
    z = with(n<=0) then x
                  else Min_2(x_n,Sliding_Min<<n-1>>(x_n)); 

tel

-- Delay n steps
node Delay<<const n:int>>(x:real) returns (z:real);
let

    z = with (n<=0) then  x
                   else x -> pre Delay<<n-1>>(x);
tel

