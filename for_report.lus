-- Since (non inclusive) with past interval
node Since_Interval<<const l:int; const u:int>>(x,y:real) returns (z:real);
let
    assert(l>=0);
    assert(u>0);

   z = Since_Recurse<<l,u,0>>(x, y);

tel

node Since_Recurse<<const l:int; const u:int; const iter:int>>(x,y:real) returns(z:real);
var x_delay, x_n, min_m, min_n:real;
let 
    assert(u-l>=0); 

    x_delay = if(Delay<<l>>(x) = -99.0) then x else Delay<<l>>(x);
    x_n = Delay<<iter>>(x_delay);
    min_m = if(Sliding_Min<<l+1>>(y) = -99.0) then y else Sliding_Min<<l+1>>(y); 
    min_n = Min_2(x_n, min_m);
    z = with (iter=u-l) then min_n
                   else Max_2(min_n, Since_Recurse<<l,u,iter+1>>(x,y));
            
tel

node Sliding_Min<<const k:int>>(x:real) returns (z:real);
var x_n:real;
let

    assert(n>=0);

    x_k = Delay<<k>>(x);
    z = with(n=0) then x
                  else Min_2(x_k,Sliding_Min<<k-1>>(x_k)); 

tel

-- Delay stream by k steps
node Delay<<const k: int>>(x:real) returns (z:real);
let
    assert(k >= 0);

    z = with (k=0) then  x
                   else -99.0 -> pre Delay<<k-1>>(x);
tel

-- Min between two streams
node Min_2(x,y: real) returns(min:real);
let
    min = if(x>y) then y else x;
tel



